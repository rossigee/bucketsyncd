name: CI/CD Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  release:
    types: [ published ]

permissions:
  contents: write
  security-events: write
  actions: read

env:
  GO_VERSION: '1.25.0'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Check coverage
      run: |
        go tool cover -func=coverage.out
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
        echo "Total coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE < 25" | bc -l) )); then
          echo "Coverage is below 25%"
          exit 1
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v7
      with:
        version: v2.4.0
        args: --no-config --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: '-no-fail -fmt sarif -out results.sarif ./...'

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif
      continue-on-error: true
      if: always()

  build:
    name: Build Multi-Arch
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        BINARY_NAME="bucketsyncd"
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="bucketsyncd.exe"
        elif [ "$GOOS" = "darwin" ]; then
          BINARY_NAME="bucketsyncd.app"
        fi
        
        mkdir -p build
        go build -ldflags="-s -w" -o "build/${BINARY_NAME}-${GOOS}-${GOARCH}" .

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
        path: build/
        retention-days: 7

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'release'
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: build-artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        cd build-artifacts
        for dir in binaries-*; do
          if [ -d "$dir" ]; then
            cd "$dir"
            for file in *; do
              if [ -f "$file" ]; then
                cp "$file" "../../release-assets/"
              fi
            done
            cd ..
          fi
        done
        cd ../release-assets
        ls -la
        
        # Create checksums
        sha256sum * > checksums.txt

    - name: Upload release assets
      uses: softprops/action-gh-release@v2
      with:
        files: release-assets/*
        token: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [test, lint, security]
    if: github.event_name == 'release'
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name == 'release'
      uses: docker/login-action@v3
      continue-on-error: true
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name == 'release' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max